generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime
}

model User {
    id            Int        @id @default(autoincrement())
    image         String?
    name          String
    username      String     @unique
    email         String     @unique
    password      String?
    emailVerified DateTime?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    tasks         Task[]
    categories    Category[]
    accounts      Account[]
    sessions      Session[]
    tags          Tag[]
}

model Category {
    id        Int      @id @default(autoincrement())
    name      String
    color     String   @default("#CCCCCC")
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    tasks     Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id          Int          @id @default(autoincrement())
    title       String
    description String?
    dueDate     DateTime?
    isCompleted Boolean      @default(false)
    priority    TaskPriority @default(Normal)
    user        User         @relation(fields: [userId], references: [id])
    userId      Int
    category    Category?    @relation(fields: [categoryId], references: [id])
    categoryId  Int?
    tags        Tag[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Tag {
    id        Int      @id @default(autoincrement())
    name      String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    taskTags  Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TaskPriority {
    Low
    Normal
    High
}
